import { DateRange, IntradayData, EquityDetails, EquityTradeInfo, EquityCorporateInfo, HistoricalData, SeriesData } from './interface';
export declare enum ApiList {
    GLOSSARY = "/api/cmsContent?url=/glossary",
    HOLIDAY_TRADING = "/api/holiday-master?type=trading",
    HOLIDAY_CLEARING = "/api/holiday-master?type=clearing",
    MARKET_STATUS = "/api/marketStatus",
    MARKET_TURNOVER = "/api/market-turnover",
    ALL_INDICES = "/api/allIndices",
    INDEX_NAMES = "/api/index-names",
    CIRCULARS = "/api/circulars",
    LATEST_CIRCULARS = "/api/latest-circular",
    EQUITY_MASTER = "/api/equity-master",
    MARKET_DATA_PRE_OPEN = "/api/market-data-pre-open?key=ALL",
    MERGED_DAILY_REPORTS_CAPITAL = "/api/merged-daily-reports?key=favCapital",
    MERGED_DAILY_REPORTS_DERIVATIVES = "/api/merged-daily-reports?key=favDerivatives",
    MERGED_DAILY_REPORTS_DEBT = "/api/merged-daily-reports?key=favDebt"
}
export declare class NseIndia {
    private baseUrl;
    private cookies;
    private cookieUsedCount;
    private cookieMaxAge;
    private cookieExpiry;
    private noOfConnections;
    private getNseCookies;
    getData(url: string): Promise<any>;
    getDataByEndpoint(apiEndpoint: string): Promise<any>;
    getAllStockSymbols(): Promise<string[]>;
    getEquityDetails(symbol: string): Promise<EquityDetails>;
    getEquityTradeInfo(symbol: string): Promise<EquityTradeInfo>;
    getEquityCorporateInfo(symbol: string): Promise<EquityCorporateInfo>;
    getEquityIntradayData(symbol: string, isPreOpenData?: boolean): Promise<IntradayData>;
    getEquityHistoricalData(symbol: string, range?: DateRange): Promise<HistoricalData[]>;
    getEquitySeries(symbol: string): Promise<SeriesData>;
    getIndexIntradayData(index: string, isPreOpenData?: boolean): Promise<IntradayData>;
}
//# sourceMappingURL=index.d.ts.map